@using ComputerComponentShop.Components
@inject ComponentManager ComponentManager
@inject ShoppingCartManager ShoppingCartManager
@inject ComputerComponentRepository ComponentRepository
@inject AlertService AlertService
@inherits LayoutComponentBase


<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>



    <main>
        <!-- Open Cart button and Search input -->
        <div class="top-row px-4 d-flex justify-content-between align-items-center">
            <div class="flex-md-grow-1 me-3 position-relative" style="max-width: 400px">
                <input type="text" class="form-control" placeholder="Search for products" aria-label="Search" @bind:after="SearchForProducts" @bind="sSearchString" @oninput="ShowSearchModal"  />

                @if (!string.IsNullOrEmpty(sSearchString))
                {
                    if (sFilteredProducts.Any())
                    {
                        <div class="position-absolute top-100 start-0 w-100 mt-1 border rounded shadow z-3 bg-dark"
                        style="max-height: 300px; overflow-y: auto;">
                            <ul class="list-group list-group-flush">
                                @foreach (var product in sFilteredProducts)
                                {
                                    <li class="list-group-item" style="cursor: pointer" @onclick="() => OpenProductModal(product)">
                                        <strong>@product.Name</strong> – @product.Manufacturer (@ComponentManager.Remove_(product.ProductCategory.ToString()))
                                    </li>
                                }
                            </ul>
                        </div>
                    }

                    <button type="button" class="btn position-absolute top-50 end-0 translate-middle-y me-2 p-0" style="z-index: 5" @onclick="(ClearSearchText)">
                        <i class="bi bi-x-lg text-muted"></i>
                    </button>
                }

                @if(sShowProductModal && sSelectedProduct is not null)
                {
                    <div class="modal fade show d-block" tabindex="-1">
                        <div class="modal-dialog modal-dialog-centered modal-lg">
                            <div class="modal-content shadow-lg border-0 rounded-4">
                                <div class="modal-header bg-primary text-white rounded-top-4 bg-dark">
                                    <h5 class="modal-title fw-bold bg-dark">@sSelectedProduct.Name </h5>
                                </div>
                                <div class="modal-body">
                                    <table table table-bordered table-striped>
                                        <tbody>
                                            @foreach (var _property in sSelectedProduct.GetType().GetProperties())
                                            {
                                                var aValue = _property.GetValue(sSelectedProduct);
                                                string aPropertyName = _property.Name;
                                                string aPropertySuffix = ComponentManager.ShowCorrectSuffixOnProperty(aPropertyName);
                                                string aFormatedValue = ComponentManager.Remove_(aValue.ToString());

                                                <tr>
                                                    <th class=" p-1">@ComponentManager.PrettyPrintComponentProperties(_property.Name):</th>
                                                    <td class="vw-50 p-1">@($"{aFormatedValue}{aPropertySuffix}")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>

                                </div>
                                <div class="modal-footer bg-dark rounded-bottom-4">
                                    <button class="btn btn-secondary" @onclick="CloseProductModal">Close</button>
                                    <button class="btn btn-success" @onclick="() => ShoppingCartManager.AddProductsToCart(sSelectedProduct, 1)">Add to cart</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }

            </div>
            <div class="d-flex align-items-center">
                <button class="btn-success d-fex align-items-center gap-2 position-relative rounded" style="cursor: pointer;" data-bs-toggle="offcanvas" data-bs-target="#cartOffCanvas" aria-controls="cartOffCanvas">
                    <i class="bi bi-cart2 fs-5"></i>
                    <span>Cart</span>
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        @ShoppingCartManager.GetShoppingCart().Count
                    </span>
                </button>
            </div>
        </div>













        <ShoppingCart />

        @foreach (var message in aAlertMessage)
        {
            <div class="alert alert-success position-fixed bottom-0 end-0 m-4 shadow fade show">@message</div>
        }

        <article class="content px-4">
            @Body


        </article>

    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code{
    private List<string> aAlertMessage = new List<string>();
    private string sSearchString = string.Empty;
    private bool sShowSearchResult = false;
    private Product? sSelectedProduct;
    private bool sShowProductModal = false;
    private List<Product> sFilteredProducts = new();

    protected override void OnInitialized()
    {
        AlertService.OnShow += ToggleAlert;
        ShoppingCartManager.OnChange += UpdateCartCount;
    }

    private void UpdateCartCount()
    {
        InvokeAsync(StateHasChanged);
    }

    private async void ToggleAlert(string aMessage)
    {
        await InvokeAsync(() =>
        {
            aAlertMessage.Add(aMessage);
            StateHasChanged();
        });

        await Task.Delay(3000);

        await InvokeAsync(() =>
        {
            aAlertMessage.Remove(aMessage);
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        AlertService.OnShow -= ToggleAlert;
        ShoppingCartManager.OnChange -= UpdateCartCount;

    }

    private void ShowSearchModal(ChangeEventArgs args)
    {
        sSearchString = args.Value?.ToString() ?? "";
        sShowSearchResult = !string.IsNullOrEmpty(sSearchString);

    }

    private void OpenProductModal(Product aProduct)
    {
        sSelectedProduct = aProduct;
        sShowProductModal = true;
    }

    private void CloseProductModal()
    {
        sSelectedProduct = null;
        sShowProductModal = false;
    }

    private void ClearSearchText()
    {
        sSearchString = string.Empty;
    }

    private async Task SearchForProducts()
    {
        if (!string.IsNullOrWhiteSpace(sSearchString))
        {
            sFilteredProducts = await ComponentManager.SearchSorter(sSearchString);
        }
        else
        {
            sFilteredProducts.Clear();
        }
    }

    


}
